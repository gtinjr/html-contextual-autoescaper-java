package com.google.autoesc;

import java.io.StringWriter;

import junit.framework.TestCase;

public class SafeTextWriterTest extends TestCase {
  private void assertWritten(String html, String outContext) throws Exception {
    assertWritten(html, outContext, html);
  }

  private void assertWritten(String html, String outContext, String normalized)
      throws Exception {
    StringWriter sw = new StringWriter();
    SafeTextWriter w = new SafeTextWriter(sw, Context.TEXT);
    w.writeSafe(html);
    assertEquals(outContext, w.getContext().toString());
    assertEquals(normalized, sw.toString());
  }

  public final void testWriteSafe() throws Exception {
    assertWritten(
        "",
        "Text"
        );
    assertWritten(
        "Hello, World!",
        "Text"
        );
    assertWritten(
        // An orphaned "<" is OK.
        "I <3 Ponies!",
        "Text",
        "I &lt;3 Ponies!"
        );
    assertWritten(
        "<a",
        "Tag"
        );
    assertWritten(
        "<a ",
        "Tag"
        );
    assertWritten(
        "<a>",
        "Text"
        );
    assertWritten(
        "<a href",
        "AttrName URL"
        );
    assertWritten(
        "<a on",
        "AttrName Script"
        );
    assertWritten(
        "<a href ",
        "AfterName URL"
        );
    assertWritten(
        "<a style  =  ",
        "BeforeValue Style"
        );
    assertWritten(
        "<a href=",
        "BeforeValue URL"
        );
    assertWritten(
        "<a href=x",
        "URL SpaceOrTagEnd PreQuery",
        "<a href=\"x"
        );
    assertWritten(
        "<a href=x ",
        "Tag",
        "<a href=\"x\" "
        );
    assertWritten(
        "<a href=>",
        "Text",
        "<a href=\"\">"
        );
    assertWritten(
        "<a href=x>",
        "Text",
        "<a href=\"x\">"
        );
    assertWritten(
        "<a href ='",
        "URL SingleQuote"
        );
    assertWritten(
        "<a href=''",
        "Tag"
        );
    assertWritten(
        "<a href= \"",
        "URL DoubleQuote"
        );
    assertWritten(
        "<a href=\"\"",
        "Tag"
        );
    assertWritten(
        "<a title=\"",
        "Attr DoubleQuote"
        );
    assertWritten(
        "<a HREF='http:",
        "URL SingleQuote PreQuery"
        );
    assertWritten(
        "<a Href='/",
        "URL SingleQuote PreQuery"
        );
    assertWritten(
        "<a href='\"",
        "URL SingleQuote PreQuery",
        "<a href='&#34;"
        );
    assertWritten(
        "<a href=\"'",
        "URL DoubleQuote PreQuery",
        "<a href=\"&#39;"
        );
    assertWritten(
        "<a href='&apos;",
        "URL SingleQuote PreQuery",
        "<a href='&#39;"
        );
    assertWritten(
        "<a href=\"&quot;",
        "URL DoubleQuote PreQuery",
        "<a href=\"&#34;"
        );
    assertWritten(
        "<a href=\"&#34;",
        "URL DoubleQuote PreQuery"
        );
    assertWritten(
        "<a href=&quot;",
        "URL SpaceOrTagEnd PreQuery",
        "<a href=\"&#34;"
        );
    assertWritten(
        "<img alt=\"1\">",
        "Text"
        );
    assertWritten(
        "<img alt=\"1>\"",
        "Tag"
        );
    assertWritten(
        "<img alt=\"1>\">",
        "Text"
        );
    assertWritten(
        "<input checked type=\"checkbox\"",
        "Tag"
        );
    assertWritten(
        "<a onclick=\"",
        "JS DoubleQuote"
        );
    assertWritten(
        "<a onclick=\"//foo",
        "JSLineCmt DoubleQuote",
        "<a onclick=\""  // comment elided
        );
    assertWritten(
        "<a onclick='//\n",
        "JS SingleQuote",
        "<a onclick='\n"
        );
    assertWritten(
        "<a onclick='//\r\n",
        "JS SingleQuote",
        "<a onclick='\r\n"
        );
    assertWritten(
        "<a onclick='//\u2028",
        "JS SingleQuote",
        "<a onclick='\u2028"
        );
    assertWritten(
        "<a onclick=\"/*",
        "JSBlockCmt DoubleQuote",
        "<a onclick=\""
        );
    assertWritten(
        "<a onclick=\"/*/",
        "JSBlockCmt DoubleQuote",
        "<a onclick=\" "
        );
    assertWritten(
        "<a onclick=\"/**/",
        "JS DoubleQuote",
        "<a onclick=\" "
        );
    assertWritten(
        "<a onkeypress=\"&quot;",
        "JSDqStr DoubleQuote",
        "<a onkeypress=\"&#34;"
        );
    assertWritten(
        "<a onclick='&quot;foo&quot;",
        "JS SingleQuote DivOp",
        "<a onclick='&#34;foo&#34;"
        );
    assertWritten(
        "<a onclick=&#39;foo&#39;",
        "JS SpaceOrTagEnd DivOp",
        "<a onclick=\"&#39;foo&#39;"
        );
    assertWritten(
        "<a onclick=&#39;foo",
        "JSSqStr SpaceOrTagEnd",
        "<a onclick=\"&#39;foo"
        );
    assertWritten(
        "<a onclick=\"&quot;foo'",
        "JSDqStr DoubleQuote",
        "<a onclick=\"&#34;foo&#39;"
        );
    assertWritten(
        "<a onclick=\"'foo&quot;",
        "JSSqStr DoubleQuote",
        "<a onclick=\"&#39;foo&#34;"
        );
    assertWritten(
        "<A ONCLICK=\"'",
        "JSSqStr DoubleQuote",
        "<A ONCLICK=\"&#39;"
        );
    assertWritten(
        "<a onclick=\"/",
        "JSRegexp DoubleQuote"
        );
    assertWritten(
        "<a onclick=\"'foo'",
        "JS DoubleQuote DivOp",
        "<a onclick=\"&#39;foo&#39;"
        );
    assertWritten(
        "<a onclick=\"'foo\\'",
        "JSSqStr DoubleQuote",
        "<a onclick=\"&#39;foo\\&#39;"
        );
    assertWritten(
        "<a onclick=\"'foo\\'",
        "JSSqStr DoubleQuote",
        "<a onclick=\"&#39;foo\\&#39;"
        );
    assertWritten(
        "<a onclick=\"/foo/",
        "JS DoubleQuote DivOp"
        );
    assertWritten(
        "<script>/foo/ /=",
        "JS Script"
        );
    assertWritten(
        "<a onclick=\"1 /foo",
        "JS DoubleQuote DivOp"
        );
    assertWritten(
        "<a onclick=\"1 /*c*/ /foo",
        "JS DoubleQuote DivOp",
        "<a onclick=\"1   /foo"
        );
    assertWritten(
        "<a onclick=\"/foo[/]",
        "JSRegexp DoubleQuote"
        );
    assertWritten(
        "<a onclick=\"/foo\\/",
        "JSRegexp DoubleQuote"
        );
    assertWritten(
        "<a onclick=\"/foo/",
        "JS DoubleQuote DivOp"
        );
    assertWritten(
        "<input checked style=\"",
        "CSS DoubleQuote"
        );
    assertWritten(
        "<a style=\"//",
        "CSSLineCmt DoubleQuote",
        "<a style=\""
        );
    assertWritten(
        "<a style=\"//</script>",
        "CSSLineCmt DoubleQuote",
        "<a style=\""
        );
    assertWritten(
        "<a style='//\n",
        "CSS SingleQuote",
        "<a style='\n"
        );
    assertWritten(
        "<a style='//\r",
        "CSS SingleQuote",
        "<a style='\r"
        );
    assertWritten(
        "<a style=\"/*",
        "CSSBlockCmt DoubleQuote",
        "<a style=\""
        );
    assertWritten(
        "<a style=\"/*/",
        "CSSBlockCmt DoubleQuote",
        "<a style=\" "
        );
    assertWritten(
        "<a style=\"/**/",
        "CSS DoubleQuote",
        "<a style=\" "
        );
    assertWritten(
        "<a style=\"background: '",
        "CSSSqStr DoubleQuote",
        "<a style=\"background: &#39;"
        );
    assertWritten(
        "<a style=\"background: &quot;",
        "CSSDqStr DoubleQuote",
        "<a style=\"background: &#34;"
        );
    assertWritten(
        "<a style=\"background: '/foo?img=",
        "CSSSqStr DoubleQuote QueryOrFrag",
        "<a style=\"background: &#39;/foo?img="
        );
    assertWritten(
        "<a style=\"background: '/",
        "CSSSqStr DoubleQuote PreQuery",
        "<a style=\"background: &#39;/"
        );
    assertWritten(
        "<a style=\"background: url(&#x22;/",
        "CSSDqURL DoubleQuote PreQuery",
        "<a style=\"background: url(&#34;/"
        );
    assertWritten(
        "<a style=\"background: url('/",
        "CSSSqURL DoubleQuote PreQuery",
        "<a style=\"background: url(&#39;/"
        );
    assertWritten(
        "<a style=\"background: url('/)",
        "CSSSqURL DoubleQuote PreQuery",
        "<a style=\"background: url(&#39;/)"
        );
    assertWritten(
        "<a style=\"background: url('/ ",
        "CSSSqURL DoubleQuote PreQuery",
        "<a style=\"background: url(&#39;/ "
        );
    assertWritten(
        "<a style=\"background: url(/",
        "CSSURL DoubleQuote PreQuery"
        );
    assertWritten(
        "<a style=\"background: url( ",
        "CSSURL DoubleQuote"
        );
    assertWritten(
        "<a style=\"background: url( /image?name=",
        "CSSURL DoubleQuote QueryOrFrag"
        );
    assertWritten(
        "<a style=\"background: url(x)",
        "CSS DoubleQuote"
        );
    assertWritten(
        "<a style=\"background: url('x'",
        "CSS DoubleQuote",
        "<a style=\"background: url(&#39;x&#39;"
        );
    assertWritten(
        "<a style=\"background: url( x ",
        "CSS DoubleQuote"
        );
    assertWritten(
        "<!-- foo",
        "HTMLCmt",
        ""
        );
    assertWritten(
        "<!-->",
        "HTMLCmt",
        ""
        );
    assertWritten(
        "<!--->",
        "HTMLCmt",
        ""
        );
    assertWritten(
        "<!-- foo -->",
        "Text",
        ""
        );
    assertWritten(
        "<script",
        "Tag Script"
        );
    assertWritten(
        "<script ",
        "Tag Script"
        );
    assertWritten(
        "<script src=\"foo.js\" ",
        "Tag Script"
        );
    assertWritten(
        "<script src='foo.js' ",
        "Tag Script"
        );
    assertWritten(
        "<script type=text/javascript ",
        "Tag Script",
        "<script type=\"text/javascript\" "
        );
    assertWritten(
        "<script>foo",
        "JS DivOp Script"
        );
    assertWritten(
        "<script>foo</script>",
        "Text"
        );
    assertWritten(
        "<script>foo</script><!--",
        "HTMLCmt",
        "<script>foo</script>"
        );
    assertWritten(
        "<script>document.write(\"<p>foo</p>\");",
        "JS Script"
        );
    assertWritten(
        "<script>document.write(\"<p>foo<\\/script>\");",
        "JS Script"
        );
    assertWritten(
        "<script>document.write(\"<script>alert(1)</script>\");",
        "Text"
        );
    assertWritten(
        "<Script>",
        "JS Script"
        );
    assertWritten(
        "<SCRIPT>foo",
        "JS DivOp Script"
        );
    assertWritten(
        "<textarea>value",
        "RCDATA Textarea"
        );
    assertWritten(
        "<textarea>value</TEXTAREA>",
        "Text"
        );
    assertWritten(
        "<textarea name=html><b",
        "RCDATA Textarea",
        "<textarea name=\"html\"><b"
        );
    assertWritten(
        "<title>value",
        "RCDATA Title"
        );
    assertWritten(
        "<style>value",
        "CSS Style"
        );
    assertWritten(
        "<a xlink:href",
        "AttrName URL"
        );
    assertWritten(
        "<a xmlns",
        "AttrName URL"
        );
    assertWritten(
        "<a xmlns:foo",
        "AttrName URL"
        );
    assertWritten(
        "<a xmlnsxyz",
        "AttrName"
        );
    assertWritten(
        "<a data-url",
        "AttrName URL"
        );
    assertWritten(
        "<a data-iconUri",
        "AttrName URL"
        );
    assertWritten(
        "<a data-urlItem",
        "AttrName URL"
        );
    assertWritten(
        "<a g:",
        "AttrName"
        );
    assertWritten(
        "<a g:url",
        "AttrName URL"
        );
    assertWritten(
        "<a g:iconUri",
        "AttrName URL"
        );
    assertWritten(
        "<a g:urlItem",
        "AttrName URL"
        );
    assertWritten(
        "<a g:value",
        "AttrName"
        );
    assertWritten(
        "<a svg:style='",
        "CSS SingleQuote"
        );
    assertWritten(
        "<svg:font-face",
        "Tag"
        );
    assertWritten(
        "<svg:a svg:onclick=\"",
        "JS DoubleQuote"
        );
  }

  private static Map<String, Object> SUBSTS
    = ImmutableMap.<String, Object>builder()
    .put("F", false)
    .put("T", true)
    .put("C", "<Cincinatti>")
    .put("G", "<Goodbye>")
    .put("H", "<Hello>")
    .put("A", ImmutableList.of("<a>", "<b>"))
    .put("E", ImmutableList.<Object>of())
    .put("N", 42)
    .put("B", new BadMarshaler())
    .put("M", new GoodMarshaler())
    .put("Z", null)
    .put("W", new SafeHTML("&iexcl;<b class=\"foo\">Hello</b>,"
                           + " <textarea>O'World</textarea>!"))
    .build();

  public final void testSafeWriter() throws Exception {
    assertTemplateOutput(
            "if",
            "{{if .T}}Hello{{end}}, {{.C}}!",
            "Hello, &lt;Cincinatti&gt;!",
        );
    assertTemplateOutput(
            "else",
            "{{if .F}}{{.H}}{{else}}{{.G}}{{end}}!",
            "&lt;Goodbye&gt;!",
        );
    assertTemplateOutput(
            "overescaping1",
            "Hello, {{.C | html}}!",
            "Hello, &lt;Cincinatti&gt;!",
        );
    assertTemplateOutput(
            "overescaping2",
            "Hello, {{html .C}}!",
            "Hello, &lt;Cincinatti&gt;!",
        );
    assertTemplateOutput(
            "overescaping3",
            "{{with .C}}{{$msg := .}}Hello, {{$msg}}!{{end}}",
            "Hello, &lt;Cincinatti&gt;!",
        );
    assertTemplateOutput(
            "assignment",
            "{{if $x := .H}}{{$x}}{{end}}",
            "&lt;Hello&gt;",
        );
    assertTemplateOutput(
            "withBody",
            "{{with .H}}{{.}}{{end}}",
            "&lt;Hello&gt;",
        );
    assertTemplateOutput(
            "withElse",
            "{{with .E}}{{.}}{{else}}{{.H}}{{end}}",
            "&lt;Hello&gt;",
        );
    assertTemplateOutput(
            "rangeBody",
            "{{range .A}}{{.}}{{end}}",
            "&lt;a&gt;&lt;b&gt;",
        );
    assertTemplateOutput(
            "rangeElse",
            "{{range .E}}{{.}}{{else}}{{.H}}{{end}}",
            "&lt;Hello&gt;",
        );
    assertTemplateOutput(
            "nonStringValue",
            "{{.T}}",
            "true",
        );
    assertTemplateOutput(
            "constant",
            `<a href="/search?q={{"'a<b'"}}">`,
            `<a href="/search?q=%27a%3cb%27">`,
        );
    assertTemplateOutput(
            "multipleAttrs",
            "<a b=1 c={{.H}}>",
            "<a b=1 c=&lt;Hello&gt;>",
        );
    assertTemplateOutput(
            "urlStartRel",
            `<a href='{{"/foo/bar?a=b&c=d"}}'>`,
            `<a href='/foo/bar?a=b&amp;c=d'>`,
        );
    assertTemplateOutput(
            "urlStartAbsOk",
            `<a href='{{"http://example.com/foo/bar?a=b&c=d"}}'>`,
            `<a href='http://example.com/foo/bar?a=b&amp;c=d'>`,
        );
    assertTemplateOutput(
            "protocolRelativeURLStart",
            `<a href='{{"//example.com:8000/foo/bar?a=b&c=d"}}'>`,
            `<a href='//example.com:8000/foo/bar?a=b&amp;c=d'>`,
        );
    assertTemplateOutput(
            "pathRelativeURLStart",
            `<a href="{{"/javascript:80/foo/bar"}}">`,
            `<a href="/javascript:80/foo/bar">`,
        );
    assertTemplateOutput(
            "dangerousURLStart",
            `<a href='{{"javascript:alert(%22pwned%22)"}}'>`,
            `<a href='#ZgotmplZ'>`,
        );
    assertTemplateOutput(
            "dangerousURLStart2",
            `<a href='  {{"javascript:alert(%22pwned%22)"}}'>`,
            `<a href='  #ZgotmplZ'>`,
        );
    assertTemplateOutput(
            "nonHierURL",
            `<a href={{"mailto:Muhammed \"The Greatest\" Ali <m.ali@example.com>"}}>`,
            `<a href=mailto:Muhammed%20%22The%20Greatest%22%20Ali%20%3cm.ali@example.com%3e>`,
        );
    assertTemplateOutput(
            "urlPath",
            `<a href='http://{{"javascript:80"}}/foo'>`,
            `<a href='http://javascript:80/foo'>`,
        );
    assertTemplateOutput(
            "urlQuery",
            `<a href='/search?q={{.H}}'>`,
            `<a href='/search?q=%3cHello%3e'>`,
        );
    assertTemplateOutput(
            "urlFragment",
            `<a href='/faq#{{.H}}'>`,
            `<a href='/faq#%3cHello%3e'>`,
        );
    assertTemplateOutput(
            "urlBranch",
            `<a href="{{if .F}}/foo?a=b{{else}}/bar{{end}}">`,
            `<a href="/bar">`,
        );
    assertTemplateOutput(
            "urlBranchConflictMoot",
            `<a href="{{if .T}}/foo?a={{else}}/bar#{{end}}{{.C}}">`,
            `<a href="/foo?a=%3cCincinatti%3e">`,
        );
    assertTemplateOutput(
            "jsStrValue",
            "<button onclick='alert({{.H}})'>",
            `<button onclick='alert(&#34;\u003cHello\u003e&#34;)'>`,
        );
    assertTemplateOutput(
            "jsNumericValue",
            "<button onclick='alert({{.N}})'>",
            `<button onclick='alert( 42 )'>`,
        );
    assertTemplateOutput(
            "jsBoolValue",
            "<button onclick='alert({{.T}})'>",
            `<button onclick='alert( true )'>`,
        );
    assertTemplateOutput(
            "jsNilValue",
            "<button onclick='alert(typeof{{.Z}})'>",
            `<button onclick='alert(typeof null )'>`,
        );
    assertTemplateOutput(
            "jsObjValue",
            "<button onclick='alert({{.A}})'>",
            `<button onclick='alert([&#34;\u003ca\u003e&#34;,&#34;\u003cb\u003e&#34;])'>`,
        );
    assertTemplateOutput(
            "jsObjValueScript",
            "<script>alert({{.A}})</script>",
            `<script>alert(["\u003ca\u003e","\u003cb\u003e"])</script>`,
        );
    assertTemplateOutput(
            "jsObjValueNotOverEscaped",
            "<button onclick='alert({{.A | html}})'>",
            `<button onclick='alert([&#34;\u003ca\u003e&#34;,&#34;\u003cb\u003e&#34;])'>`,
        );
    assertTemplateOutput(
            "jsStr",
            "<button onclick='alert(&quot;{{.H}}&quot;)'>",
            `<button onclick='alert(&quot;\x3cHello\x3e&quot;)'>`,
        );
    assertTemplateOutput(
            "badMarshaller",
            `<button onclick='alert(1/{{.B}}in numbers)'>`,
            `<button onclick='alert(1/ /* json: error calling MarshalJSON for type *html.badMarshaler: invalid character &#39;f&#39; looking for beginning of object key string */null in numbers)'>`,
        );
    assertTemplateOutput(
            "jsMarshaller",
            `<button onclick='alert({{.M}})'>`,
            `<button onclick='alert({&#34;&lt;foo&gt;&#34;:&#34;O&#39;Reilly&#34;})'>`,
        );
    assertTemplateOutput(
            "jsStrNotUnderEscaped",
            "<button onclick='alert({{.C | urlquery}})'>",
            // URL escaped, then quoted for JS.
            `<button onclick='alert(&#34;%3CCincinatti%3E&#34;)'>`,
        );
    assertTemplateOutput(
            "jsRe",
            `<button onclick='alert(/{{"foo+bar"}}/.test(""))'>`,
            `<button onclick='alert(/foo\x2bbar/.test(""))'>`,
        );
    assertTemplateOutput(
            "jsReBlank",
            `<script>alert(/{{""}}/.test(""));</script>`,
            `<script>alert(/(?:)/.test(""));</script>`,
        );
    assertTemplateOutput(
            "jsReAmbigOk",
            `<script>{{if true}}var x = 1{{end}}</script>`,
            // The {if} ends in an ambiguous jsCtx but there is
            // no slash following so we shouldn't care.
            `<script>var x = 1</script>`,
        );
    assertTemplateOutput(
            "styleBidiKeywordPassed",
            `<p style="dir: {{"ltr"}}">`,
            `<p style="dir: ltr">`,
        );
    assertTemplateOutput(
            "styleBidiPropNamePassed",
            `<p style="border-{{"left"}}: 0; border-{{"right"}}: 1in">`,
            `<p style="border-left: 0; border-right: 1in">`,
        );
    assertTemplateOutput(
            "styleExpressionBlocked",
            `<p style="width: {{"expression(alert(1337))"}}">`,
            `<p style="width: ZgotmplZ">`,
        );
    assertTemplateOutput(
            "styleTagSelectorPassed",
            `<style>{{"p"}} { color: pink }</style>`,
            `<style>p { color: pink }</style>`,
        );
    assertTemplateOutput(
            "styleIDPassed",
            `<style>p{{"#my-ID"}} { font: Arial }</style>`,
            `<style>p#my-ID { font: Arial }</style>`,
        );
    assertTemplateOutput(
            "styleClassPassed",
            `<style>p{{".my_class"}} { font: Arial }</style>`,
            `<style>p.my_class { font: Arial }</style>`,
        );
    assertTemplateOutput(
            "styleQuantityPassed",
            `<a style="left: {{"2em"}}; top: {{0}}">`,
            `<a style="left: 2em; top: 0">`,
        );
    assertTemplateOutput(
            "stylePctPassed",
            `<table style=width:{{"100%"}}>`,
            `<table style=width:100%>`,
        );
    assertTemplateOutput(
            "styleColorPassed",
            `<p style="color: {{"#8ff"}}; background: {{"#000"}}">`,
            `<p style="color: #8ff; background: #000">`,
        );
    assertTemplateOutput(
            "styleObfuscatedExpressionBlocked",
            `<p style="width: {{"  e\78preS\0Sio/**/n(alert(1337))"}}">`,
            `<p style="width: ZgotmplZ">`,
        );
    assertTemplateOutput(
            "styleMozBindingBlocked",
            `<p style="{{"-moz-binding(alert(1337))"}}: ...">`,
            `<p style="ZgotmplZ: ...">`,
        );
    assertTemplateOutput(
            "styleObfuscatedMozBindingBlocked",
            `<p style="{{"  -mo\7a-B\0I/**/nding(alert(1337))"}}: ...">`,
            `<p style="ZgotmplZ: ...">`,
        );
    assertTemplateOutput(
            "styleFontNameString",
            `<p style='font-family: "{{"Times New Roman"}}"'>`,
            `<p style='font-family: "Times New Roman"'>`,
        );
    assertTemplateOutput(
            "styleFontNameString",
            `<p style='font-family: "{{"Times New Roman"}}", "{{"sans-serif"}}"'>`,
            `<p style='font-family: "Times New Roman", "sans-serif"'>`,
        );
    assertTemplateOutput(
            "styleFontNameUnquoted",
            `<p style='font-family: {{"Times New Roman"}}'>`,
            `<p style='font-family: Times New Roman'>`,
        );
    assertTemplateOutput(
            "styleURLQueryEncoded",
            `<p style="background: url(/img?name={{"O'Reilly Animal(1)<2>.png"}})">`,
            `<p style="background: url(/img?name=O%27Reilly%20Animal%281%29%3c2%3e.png)">`,
        );
    assertTemplateOutput(
            "styleQuotedURLQueryEncoded",
            `<p style="background: url('/img?name={{"O'Reilly Animal(1)<2>.png"}}')">`,
            `<p style="background: url('/img?name=O%27Reilly%20Animal%281%29%3c2%3e.png')">`,
        );
    assertTemplateOutput(
            "styleStrQueryEncoded",
            `<p style="background: '/img?name={{"O'Reilly Animal(1)<2>.png"}}'">`,
            `<p style="background: '/img?name=O%27Reilly%20Animal%281%29%3c2%3e.png'">`,
        );
    assertTemplateOutput(
            "styleURLBadProtocolBlocked",
            `<a style="background: url('{{"javascript:alert(1337)"}}')">`,
            `<a style="background: url('#ZgotmplZ')">`,
        );
    assertTemplateOutput(
            "styleStrBadProtocolBlocked",
            `<a style="background: '{{"vbscript:alert(1337)"}}'">`,
            `<a style="background: '#ZgotmplZ'">`,
        );
    assertTemplateOutput(
            "styleStrEncodedProtocolEncoded",
            `<a style="background: '{{"javascript\\3a alert(1337)"}}'">`,
            // The CSS string 'javascript\\3a alert(1337)' does not contains a colon.
            `<a style="background: 'javascript\\3a alert\28 1337\29 '">`,
        );
    assertTemplateOutput(
            "styleURLGoodProtocolPassed",
            `<a style="background: url('{{"http://oreilly.com/O'Reilly Animals(1)<2>;{}.html"}}')">`,
            `<a style="background: url('http://oreilly.com/O%27Reilly%20Animals%281%29%3c2%3e;%7b%7d.html')">`,
        );
    assertTemplateOutput(
            "styleStrGoodProtocolPassed",
            `<a style="background: '{{"http://oreilly.com/O'Reilly Animals(1)<2>;{}.html"}}'">`,
            `<a style="background: 'http\3a\2f\2foreilly.com\2fO\27Reilly Animals\28 1\29\3c 2\3e\3b\7b\7d.html'">`,
        );
    assertTemplateOutput(
            "styleURLEncodedForHTMLInAttr",
            `<a style="background: url('{{"/search?img=foo&size=icon"}}')">`,
            `<a style="background: url('/search?img=foo&amp;size=icon')">`,
        );
    assertTemplateOutput(
            "styleURLNotEncodedForHTMLInCdata",
            `<style>body { background: url('{{"/search?img=foo&size=icon"}}') }</style>`,
            `<style>body { background: url('/search?img=foo&size=icon') }</style>`,
        );
    assertTemplateOutput(
            "styleURLMixedCase",
            `<p style="background: URL(#{{.H}})">`,
            `<p style="background: URL(#%3cHello%3e)">`,
        );
    assertTemplateOutput(
            "stylePropertyPairPassed",
            `<a style='{{"color: red"}}'>`,
            `<a style='color: red'>`,
        );
    assertTemplateOutput(
            "styleStrSpecialsEncoded",
            `<a style="font-family: '{{"/**/'\";:// \\"}}', &quot;{{"/**/'\";:// \\"}}&quot;">`,
            `<a style="font-family: '\2f**\2f\27\22\3b\3a\2f\2f \\', &quot;\2f**\2f\27\22\3b\3a\2f\2f \\&quot;">`,
        );
    assertTemplateOutput(
            "styleURLSpecialsEncoded",
            `<a style="border-image: url({{"/**/'\";:// \\"}}), url(&quot;{{"/**/'\";:// \\"}}&quot;), url('{{"/**/'\";:// \\"}}'), 'http://www.example.com/?q={{"/**/'\";:// \\"}}''">`,
            `<a style="border-image: url(/**/%27%22;://%20%5c), url(&quot;/**/%27%22;://%20%5c&quot;), url('/**/%27%22;://%20%5c'), 'http://www.example.com/?q=%2f%2a%2a%2f%27%22%3b%3a%2f%2f%20%5c''">`,
        );
    assertTemplateOutput(
            "HTML comment",
            "<b>Hello, <!-- name of world -->{{.C}}</b>",
            "<b>Hello, &lt;Cincinatti&gt;</b>",
        );
    assertTemplateOutput(
            "HTML comment not first < in text node.",
            "<<!-- -->!--",
            "&lt;!--",
        );
    assertTemplateOutput(
            "HTML normalization 1",
            "a < b",
            "a &lt; b",
        );
    assertTemplateOutput(
            "HTML normalization 2",
            "a << b",
            "a &lt;&lt; b",
        );
    assertTemplateOutput(
            "HTML normalization 3",
            "a<<!-- --><!-- -->b",
            "a&lt;b",
        );
    assertTemplateOutput(
            "HTML doctype not normalized",
            "<!DOCTYPE html>Hello, World!",
            "<!DOCTYPE html>Hello, World!",
        );
    assertTemplateOutput(
            "No doctype injection",
            `<!{{"DOCTYPE"}}`,
            "&lt;!DOCTYPE",
        );
    assertTemplateOutput(
            "Split HTML comment",
            "<b>Hello, <!-- name of {{if .T}}city -->{{.C}}{{else}}world -->{{.W}}{{end}}</b>",
            "<b>Hello, &lt;Cincinatti&gt;</b>",
        );
    assertTemplateOutput(
            "JS line comment",
            "<script>for (;;) { if (c()) break// foo not a label\n" +
                "foo({{.T}});}</script>",
            "<script>for (;;) { if (c()) break\n" +
                "foo( true );}</script>",
        );
    assertTemplateOutput(
            "JS multiline block comment",
            "<script>for (;;) { if (c()) break/* foo not a label\n" +
                " */foo({{.T}});}</script>",
            // Newline separates break from call. If newline
            // removed, then break will consume label leaving
            // code invalid.
            "<script>for (;;) { if (c()) break\n" +
                "foo( true );}</script>",
        );
    assertTemplateOutput(
            "JS single-line block comment",
            "<script>for (;;) {\n" +
                "if (c()) break/* foo a label */foo;" +
                "x({{.T}});}</script>",
            // Newline separates break from call. If newline
            // removed, then break will consume label leaving
            // code invalid.
            "<script>for (;;) {\n" +
                "if (c()) break foo;" +
                "x( true );}</script>",
        );
    assertTemplateOutput(
            "JS block comment flush with mathematical division",
            "<script>var a/*b*//c\nd</script>",
            "<script>var a /c\nd</script>",
        );
    assertTemplateOutput(
            "JS mixed comments",
            "<script>var a/*b*///c\nd</script>",
            "<script>var a \nd</script>",
        );
    assertTemplateOutput(
            "CSS comments",
            "<style>p// paragraph\n" +
                `{border: 1px/* color */{{"#00f"}}}</style>`,
            "<style>p\n" +
                "{border: 1px #00f}</style>",
        );
    assertTemplateOutput(
            "JS attr block comment",
            `<a onclick="f(&quot;&quot;); /* alert({{.H}}) */">`,
            // Attribute comment tests should pass if the comments
            // are successfully elided.
            `<a onclick="f(&quot;&quot;); /* alert() */">`,
        );
    assertTemplateOutput(
            "JS attr line comment",
            `<a onclick="// alert({{.G}})">`,
            `<a onclick="// alert()">`,
        );
    assertTemplateOutput(
            "CSS attr block comment",
            `<a style="/* color: {{.H}} */">`,
            `<a style="/* color:  */">`,
        );
    assertTemplateOutput(
            "CSS attr line comment",
            `<a style="// color: {{.G}}">`,
            `<a style="// color: ">`,
        );
    assertTemplateOutput(
            "HTML substitution commented out",
            "<p><!-- {{.H}} --></p>",
            "<p></p>",
        );
    assertTemplateOutput(
            "Comment ends flush with start",
            "<!--{{.}}--><script>/*{{.}}*///{{.}}\n</script><style>/*{{.}}*///{{.}}\n</style><a onclick='/*{{.}}*///{{.}}' style='/*{{.}}*///{{.}}'>",
            "<script> \n</script><style> \n</style><a onclick='/**///' style='/**///'>",
        );
    assertTemplateOutput(
            "typed HTML in text",
            `{{.W}}`,
            `&iexcl;<b class="foo">Hello</b>, <textarea>O'World</textarea>!`,
        );
    assertTemplateOutput(
            "typed HTML in attribute",
            `<div title="{{.W}}">`,
            `<div title="&iexcl;Hello, O&#39;World!">`,
        );
    assertTemplateOutput(
            "typed HTML in script",
            `<button onclick="alert({{.W}})">`,
            `<button onclick="alert(&#34;&amp;iexcl;\u003cb class=\&#34;foo\&#34;\u003eHello\u003c/b\u003e, \u003ctextarea\u003eO&#39;World\u003c/textarea\u003e!&#34;)">`,
        );
    assertTemplateOutput(
            "typed HTML in RCDATA",
            `<textarea>{{.W}}</textarea>`,
            `<textarea>&iexcl;&lt;b class=&#34;foo&#34;&gt;Hello&lt;/b&gt;, &lt;textarea&gt;O&#39;World&lt;/textarea&gt;!</textarea>`,
        );
    assertTemplateOutput(
            "range in textarea",
            "<textarea>{{range .A}}{{.}}{{end}}</textarea>",
            "<textarea>&lt;a&gt;&lt;b&gt;</textarea>",
        );
    assertTemplateOutput(
            "auditable exemption from escaping",
            "{{range .A}}{{. | noescape}}{{end}}",
            "<a><b>",
        );
    assertTemplateOutput(
            "No tag injection",
            `{{"10$"}}<{{"script src,evil.org/pwnd.js"}}...`,
            `10$&lt;script src,evil.org/pwnd.js...`,
        );
    assertTemplateOutput(
            "No comment injection",
            `<{{"!--"}}`,
            `&lt;!--`,
        );
    assertTemplateOutput(
            "No RCDATA end tag injection",
            `<textarea><{{"/textarea "}}...</textarea>`,
            `<textarea>&lt;/textarea ...</textarea>`,
        );
    assertTemplateOutput(
            "optional attrs",
            `<img class="{{"iconClass"}}"` +
                `{{if .T}} id="{{"<iconId>"}}"{{end}}` +
                // Double quotes inside if/else.
                ` src=` +
                `{{if .T}}"?{{"<iconPath>"}}"` +
                `{{else}}"images/cleardot.gif"{{end}}` +
                // Missing space before title, but it is not a
                // part of the src attribute.
                `{{if .T}}title="{{"<title>"}}"{{end}}` +
                // Quotes outside if/else.
                ` alt="` +
                `{{if .T}}{{"<alt>"}}` +
                `{{else}}{{if .F}}{{"<title>"}}{{end}}` +
                `{{end}}"` +
                `>`,
            `<img class="iconClass" id="&lt;iconId&gt;" src="?%3ciconPath%3e"title="&lt;title&gt;" alt="&lt;alt&gt;">`,
        );
    assertTemplateOutput(
            "conditional valueless attr name",
            `<input{{if .T}} checked{{end}} name=n>`,
            `<input checked name=n>`,
        );
    assertTemplateOutput(
            "conditional dynamic valueless attr name 1",
            `<input{{if .T}} {{"checked"}}{{end}} name=n>`,
            `<input checked name=n>`,
        );
    assertTemplateOutput(
            "conditional dynamic valueless attr name 2",
            `<input {{if .T}}{{"checked"}} {{end}}name=n>`,
            `<input checked name=n>`,
        );
    assertTemplateOutput(
            "dynamic attribute name",
            `<img on{{"load"}}="alert({{"loaded"}})">`,
            // Treated as JS since quotes are inserted.
            `<img onload="alert(&#34;loaded&#34;)">`,
        );
    assertTemplateOutput(
            "bad dynamic attribute name 1",
            // Allow checked, selected, disabled, but not JS or
            // CSS attributes.
            `<input {{"onchange"}}="{{"doEvil()"}}">`,
            `<input ZgotmplZ="doEvil()">`,
        );
    assertTemplateOutput(
            "bad dynamic attribute name 2",
            `<div {{"sTyle"}}="{{"color: expression(alert(1337))"}}">`,
            `<div ZgotmplZ="color: expression(alert(1337))">`,
        );
    assertTemplateOutput(
            "bad dynamic attribute name 3",
            // Allow title or alt, but not a URL.
            `<img {{"src"}}="{{"javascript:doEvil()"}}">`,
            `<img ZgotmplZ="javascript:doEvil()">`,
        );
    assertTemplateOutput(
            "bad dynamic attribute name 4",
            // Structure preservation requires values to associate
            // with a consistent attribute.
            `<input checked {{""}}="Whose value am I?">`,
            `<input checked ZgotmplZ="Whose value am I?">`,
        );
    assertTemplateOutput(
            "dynamic element name",
            `<h{{3}}><table><t{{"head"}}>...</h{{3}}>`,
            `<h3><table><thead>...</h3>`,
        );
    assertTemplateOutput(
            "bad dynamic element name",
            // Dynamic element names are typically used to switch
            // between (thead, tfoot, tbody), (ul, ol), (th, td),
            // and other replaceable sets.
            // We do not currently easily support (ul, ol).
            // If we do change to support that, this test should
            // catch failures to filter out special tag names which
            // would violate the structure preservation property --
            // if any special tag name could be substituted, then
            // the content could be raw text/RCDATA for some inputs
            // and regular HTML content for others.
            `<{{"script"}}>{{"doEvil()"}}</{{"script"}}>`,
            `&lt;script>doEvil()&lt;/script>`,
        );
  }
}
